const Event = require('../model/event.js');
const multer = require('multer');

let filename = '';

const mystorage = multer.diskStorage({
    destination: './uploads',
    filename: (req, file, redirect) => {
        let date = Date.now();
        let f1 = date + '-' + file.originalname;
        filename = f1; // Move filename assignment here
        redirect(null, f1);
    }
});
const upload = multer({ storage: mystorage });

const getEvents = async (req, res) => {
    try {
        const evenements = await Event.find();
        res.status(200).json(evenements);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

const getEvent = async (req, res) => {
    try {
        const evenement = await Event.findById(req.params.id);
        res.status(200).json(evenement);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

const createEvent = async (req, res) => { // Move upload.single('image') to here
    try {
        upload.single('image')(req, res, async function (err) {
            if (err) {
                return res.status(400).send(err);
            }
            const data = req.body;
            const evenement = new Event(data);
            evenement.image = filename;
            try {
                const saved = await evenement.save();
                filename = '';
                res.status(200).send(saved);
            } catch (err) {
                res.status(400).send(err);
            }
        });
    } catch (err) {
        res.status(500).send(err);
    }
};
const updateEvent = async (req, res) => {
    try {
        const { id } = req.params;
        let updatedData = req.body;

        if (req.file) {
            const date = Date.now();
            const newFilename = date + '-' + req.file.originalname;
            const oldService = await Event.findById(id);

            if (!oldService) {
                return res.status(404).json({ message: "Event not found" });
            }

            const filePath = './uploads/' + oldService.image;
            fs.unlinkSync(filePath);

            updatedData.image = newFilename;
        }

        const evenement = await Event.findByIdAndUpdate(id, updatedData, { new: true });

        if (!evenement) {
            return res.status(404).json({ message: "Event not found" });
        }

        res.status(200).json(evenement);
    } catch (error) {

        console.error("Error:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};


const deleteEvent = async (req, res) => {
    try {
        const { id } = req.params;
        const evenement = await Event.findByIdAndDelete(id);
        if (!evenement) {
            return res.status(404).json({ message: "Event not found" });
        }
        res.status(200).json({ message: "Event deleted" });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

module.exports = {
    getEvents,
    getEvent,
    createEvent,
    updateEvent,
    deleteEvent,
};